// <auto-generated />
using System;
using APISegaAI.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace APISegaAI.DAL.Migrations
{
    [DbContext(typeof(SegaAIContext))]
    partial class SegaAIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("APISegaAI.Domain.Entity.DataPool", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TestCaseId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId")
                        .IsUnique();

                    b.ToTable("DataPools", (string)null);
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.DataPoolItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataPoolId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("DataPoolId");

                    b.ToTable("DataPoolItems", (string)null);
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.HistoryEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestCaseId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.HasIndex("Timestamp");

                    b.ToTable("HistoryEntries", (string)null);
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.InputData", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TestCaseId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId")
                        .IsUnique();

                    b.ToTable("InputData", (string)null);
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.TestCase", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Postcondition")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Precondition")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("TestCases", (string)null);
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.TestStep", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<string>("TestCaseId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("TestCaseId");

                    b.ToTable("TestSteps", (string)null);
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.DataPool", b =>
                {
                    b.HasOne("APISegaAI.Domain.Entity.TestCase", "TestCase")
                        .WithOne()
                        .HasForeignKey("APISegaAI.Domain.Entity.DataPool", "TestCaseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.DataPoolItem", b =>
                {
                    b.HasOne("APISegaAI.Domain.Entity.DataPool", "DataPool")
                        .WithMany("Items")
                        .HasForeignKey("DataPoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPool");
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.HistoryEntry", b =>
                {
                    b.HasOne("APISegaAI.Domain.Entity.TestCase", "TestCase")
                        .WithMany("History")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.InputData", b =>
                {
                    b.HasOne("APISegaAI.Domain.Entity.TestCase", "TestCase")
                        .WithOne()
                        .HasForeignKey("APISegaAI.Domain.Entity.InputData", "TestCaseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.TestStep", b =>
                {
                    b.HasOne("APISegaAI.Domain.Entity.TestCase", "TestCase")
                        .WithMany("Steps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.DataPool", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("APISegaAI.Domain.Entity.TestCase", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
