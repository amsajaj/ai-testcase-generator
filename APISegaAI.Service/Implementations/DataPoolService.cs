namespace APISegaAI.Service.Implementations
{
    /// для работы с тестовыми данными (DataPool), включая генерацию через LLM и сохранение пользовательских данных.
    public class DataPoolService : IDataPoolService
    {
        private readonly IUnitOfWork _unitOfWork; 
        private readonly ILlmService _llmService;

        public DataPoolService(IUnitOfWork unitOfWork, ILlmService llmService)
        {
            _unitOfWork = unitOfWork ?? throw new ArgumentNullException(nameof(unitOfWork));
            _llmService = llmService ?? throw new ArgumentNullException(nameof(llmService));
        }

        /// <summary>
        /// Генерирует тестовые данные (DataPool) на основе JSON тест-кейса с использованием LLM.
        /// </summary>
        /// <param name="testCaseJson">JSON-строка, содержащая тест-кейс, на основе которого генерируются данные.</param>
        /// <param name="llmModel">Модель LLM для генерации (например, "qwen3-32b-awq").</param>
        /// <param name="testCaseId">Идентификатор тест-кейса для привязки DataPool (опционально).</param>
        /// <returns>Сгенерированный объект <see cref="DataPool"/> с тестовыми данными.</returns>
        /// <exception cref="ArgumentException">Выбрасывается, если <paramref name="testCaseJson"/> или <paramref name="llmModel"/> пусты.</exception>
        /// <exception cref="InvalidOperationException">Выбрасывается, если указанный <paramref name="testCaseId"/> не существует.</exception>
        public async Task<DataPool> GenerateDataPoolAsync(string testCaseJson, string llmModel)
        {
            if (string.IsNullOrWhiteSpace(testCaseJson))
                throw new ArgumentException("Тестовый пример JSON не может быть нулевым или пустым", nameof(testCaseJson));

            if (string.IsNullOrWhiteSpace(llmModel))
                throw new ArgumentException("Модель LLM не может быть нулевой или пустой", nameof(llmModel));

            // Формирование промпта для LLM
            string prompt = $@"На основе тест-кейса в формате JSON: {testCaseJson}, сгенерируй тестовые данные (datapool) в формате JSON. 
                Формат результата: 
                {{ 
                    ""metadata"": {{ 
                            ""description"": string, 
                            ""generatedBy"": ""LLM"" 
                        }},
                    ""data"": [{{ key: value, ... }}, ...]
                }}. 
                Данные должны быть релевантны для тестирования указанного тест-кейса.";

            string datapoolJson = await _llmService.CallLlmAsync(prompt, llmModel);

            var jsonDoc = JsonDocument.Parse(datapoolJson);
            var metadata = jsonDoc.RootElement.GetProperty("metadata");
            var data = jsonDoc.RootElement.GetProperty("data");

            var dataPool = new DataPool
            {
                Id = Guid.NewGuid().ToString(),
                Description = metadata.GetProperty("description").GetString() ?? "Generated datapool",
                Source = DataPoolSource.AutoGenerated,
                TestCaseId = null // Связь с TestCase установим позже (ВАЖНО!)
            };

            dataPool.Items = data.EnumerateArray()
                .Select(item => new DataPoolItem
                {
                    Id = Guid.NewGuid().ToString(),
                    DataPoolId = dataPool.Id,
                    Data = item.ToString()
                })
                .ToList();

            await _unitOfWork.DataPools.AddAsync(dataPool);

            foreach (var item in dataPool.Items)
            {
                await _unitOfWork.DataPoolItems.AddAsync(item);
            }

            await _unitOfWork.SaveChangesAsync();

            return dataPool;
        }

        public async Task<DataPool?> GetDataPoolByIdAsync(string id)
        {
            if (string.IsNullOrWhiteSpace(id))
                throw new ArgumentException("id не может быть нулевым или пустым", nameof(id));

            var dataPool = await _unitOfWork.DataPools.GetByIdAsync(id);
            if (dataPool is not null) dataPool.Items = await _unitOfWork.DataPoolItems.GetByDataPoolIdAsync(id);
            
            return dataPool;
        }

        // Получает тестовые данные (DataPool), связанные с указанным тест-кейсом.
        public async Task<DataPool?> GetDataPoolByTestCaseIdAsync(string testCaseId)
        {
            if (string.IsNullOrWhiteSpace(testCaseId))
                throw new ArgumentException("id тестового набора не может быть нулевым или пустым", nameof(testCaseId));

            var dataPool = await _unitOfWork.DataPools.GetByTestCaseIdAsync(testCaseId);
            if (dataPool is not null) dataPool.Items = await _unitOfWork.DataPoolItems.GetByDataPoolIdAsync(dataPool.Id);
            
            return dataPool;
        }

        public async Task<DataPool> SaveUserDataPoolAsync(IFormFile file, string? testCaseId)
        {
            if (file == null || file.Length == 0)
                throw new ArgumentException("Файл не может быть нулевым или пустым", nameof(file));

            if (!string.IsNullOrWhiteSpace(testCaseId))
            {
                var testCase = await _unitOfWork.TestCases.GetByIdAsync(testCaseId);
                if (testCase == null)
                    throw new InvalidOperationException($"TestCase с id {testCaseId} не найден");
            }

            using var stream = new StreamReader(file.OpenReadStream());
            string content = await stream.ReadToEndAsync();

            var jsonDoc = JsonDocument.Parse(content);
            var metadata = jsonDoc.RootElement.TryGetProperty("metadata", out var metadataProp)
                ? metadataProp.GetProperty("description").GetString() ?? "User uploaded datapool"
                : "User uploaded datapool";
            var data = jsonDoc.RootElement.GetProperty("data");

            var dataPool = new DataPool
            {
                Id = Guid.NewGuid().ToString(),
                Description = metadata,
                Source = DataPoolSource.UserProvided,
                TestCaseId = testCaseId
            };

            dataPool.Items = data.EnumerateArray()
                .Select(item => new DataPoolItem
                {
                    Id = Guid.NewGuid().ToString(),
                    DataPoolId = dataPool.Id,
                    Data = item.ToString()
                })
                .ToList();

            await _unitOfWork.DataPools.AddAsync(dataPool);
            
            foreach (var item in dataPool.Items)
            {
                await _unitOfWork.DataPoolItems.AddAsync(item);
            }

            await _unitOfWork.SaveChangesAsync();

            return dataPool;
        }
    }
}