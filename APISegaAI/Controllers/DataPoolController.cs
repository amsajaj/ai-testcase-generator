namespace APISegaAI.Controllers
{
    [ApiController]
    [Route("api/datapool")]
    public class DataPoolController : BaseController<DataPoolController>
    {
        private readonly IDataPoolService _dataPoolService; 
        public DataPoolController(IDataPoolService dataPoolService, ILogger<DataPoolController> logger)
            : base(logger) => _dataPoolService = dataPoolService ?? throw new ArgumentNullException(nameof(dataPoolService));
        
        /// <summary>
        /// Генерирует тестовые данные (datapool) на основе JSON-представления тест-кейса с использованием указанной LLM.
        /// </summary>
        /// <param name="request">Объект запроса, содержащий JSON тест-кейса и название модели LLM (например, "Qwen3-32b-awq").</param>
        /// <returns>
        /// Возвращает объект <see cref="DataPool"/>, содержащий сгенерированные тестовые данные.
        /// </returns>
        /// <response code="200">Успешно сгенерирован datapool. Возвращает объект DataPool.</response>
        /// <response code="400">Некорректный запрос (например, пустой JSON или неверная модель LLM).</response>
        /// <response code="500">Внутренняя ошибка сервера (например, сбой при обращении к LLM).</response>
        /// <example>
        /// POST /api/datapool/generate
        /// 
        /// Content-Type: application/json
        /// {
        ///   "TestCaseJson": "{\"number\": \"TC-001\", \"steps\": [{\"stepNumber\": 1, \"action\": \"Ввести email\", \"expectedResult\": \"Поле заполнено\"}]}",
        ///   "LlmModel": "qwen3-32b-awq"
        /// }
        /// 
        /// Ответ (200 OK):
        /// {
        ///   "id": "guid-123",
        ///   "description": "Тестовые данные для TC-001",
        ///   "source": "AutoGenerated",
        ///   "items": [
        ///     { "id": "item-1", "dataPoolId": "guid-123", "data": "{\"email\": \"test@example.com\"}" },
        ///     { "id": "item-2", "dataPoolId": "guid-123", "data": "{\"email\": \"invalid@\"}" }
        ///   ],
        ///   "testCaseId": null
        /// }
        /// </example>
        [HttpPost("generate")]
        [ProducesResponseType(typeof(DataPool), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> GenerateDataPool([FromBody] GenerateDataPoolRequest request) =>
            await ExecuteAsync(async () =>
            {
                var dataPool = await _dataPoolService.GenerateDataPoolAsync(request.TestCaseJson, request.LlmModel);
                return dataPool;
            }, "GenerateDataPool", $"Успешно сгенерирован datapool с ID {request.TestCaseJson}");
        
        /// <summary>
        /// Сохраняет пользовательские тестовые данные из загруженного файла (JSON/CSV).
        /// </summary>
        /// <param name="file">Файл с тестовыми данными (обязательный, JSON или CSV).</param>
        /// <param name="testCaseId">ID связанного тест-кейса (опционально).</param>
        /// <returns>
        /// Возвращает объект <see cref="DataPool"/>, содержащий сохранённые тестовые данные.
        /// </returns>
        /// <response code="200">Успешно сохранён datapool. Возвращает объект DataPool.</response>
        /// <response code="400">Файл пустой или имеет некорректный формат.</response>
        /// <response code="500">Внутренняя ошибка сервера при обработке файла.</response>
        /// <example>
        /// POST /api/datapool/upload?testCaseId=guid-123
        /// Content-Type: multipart/form-data
        /// [form-data]
        /// file: (upload file "data.json" with content: [{"email": "test@example.com"}, {"email": "invalid@"}])
        /// 
        /// Response (200 OK):
        /// {
        ///   "id": "guid-456",
        ///   "description": "Пользовательские данные из файла",
        ///   "source": "UserProvided",
        ///   "items": [
        ///     { "id": "item-3", "dataPoolId": "guid-456", "data": "{\"email\": \"test@example.com\"}" },
        ///     { "id": "item-4", "dataPoolId": "guid-456", "data": "{\"email\": \"invalid@\"}" }
        ///   ],
        ///   "testCaseId": "guid-123"
        /// }
        /// </example>
        [HttpPost("upload")]
        [ProducesResponseType(typeof(DataPool), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> SaveUserDataPool(
            [Required(ErrorMessage = "Файл не может быть пустым")]
            IFormFile file, 
            [FromQuery] string? testCaseId) =>
                await ExecuteAsync(async () =>
                {
                    var dataPool = await _dataPoolService.SaveUserDataPoolAsync(file, testCaseId);
                    return dataPool;
                }, "SaveUserDataPool", $"Успешно сохранён пользовательский datapool с ID {testCaseId}");
        
        /// <summary>
        /// Получает тестовые данные (datapool) по идентификатору.
        /// </summary>
        /// <param name="id">Уникальный идентификатор datapool.</param>
        /// <returns>
        /// Возвращает объект <see cref="DataPool"/> или 404, если datapool не найден.
        /// </returns>
        /// <response code="200">Успешно возвращён datapool.</response>
        /// <response code="400">ID пустой или некорректный.</response>
        /// <response code="404">Datapool с указанным ID не найден.</response>
        /// <example>
        /// GET /api/datapool/guid-456
        /// 
        /// Ответ:
        /// {
        ///   "id": "guid-456",
        ///   "description": "Тестовые данные для TC-001",
        ///   "source": "AutoGenerated",
        ///   "items": [
        ///     { "id": "item-3", "dataPoolId": "guid-456", "data": "{\"email\": \"test@example.com\"}" }
        ///   ],
        ///   "testCaseId": "guid-123"
        /// }
        /// </example>
        [HttpGet("{id}")]
        [ProducesResponseType(typeof(DataPool), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> GetDataPoolById(
            [FromRoute] 
            [Required(ErrorMessage = "ID не может быть пустым")]
            [MinLength(1, ErrorMessage = "ID не может быть пустым")]
            string id)
        {
            var validationResult = ValidateRequiredString(id, "id");
            if (validationResult != null) return validationResult;

            return await ExecuteAsync(async () => await _dataPoolService.GetDataPoolByIdAsync(id),
                "GetDataPoolById",
                $"Успешно получен datapool с ID {id}",
                $"Datapool с ID {id} не найден");
        }

        /// <summary>
        /// Получает тестовые данные (datapool), связанные с указанным тест-кейсом.
        /// </summary>
        /// <param name="testCaseId">Уникальный идентификатор тест-кейса.</param>
        /// <returns>
        /// Возвращает объект <see cref="DataPool"/> или 404, если datapool не найден.
        /// </returns>
        /// <response code="200">Успешно возвращён datapool.</response>
        /// <response code="400">ID тест-кейса пустой или некорректный.</response>
        /// <response code="404">Datapool для указанного тест-кейса не найден.</response>
        /// <example>
        /// GET /api/datapool/by-testcase/guid-123
        /// 
        /// Response (200 OK):
        /// {
        ///   "id": "guid-456",
        ///   "description": "Тестовые данные для TC-001",
        ///   "source": "AutoGenerated",
        ///   "items": [
        ///     { "id": "item-3", "dataPoolId": "guid-456", "data": "{\"email\": \"test@example.com\"}" }
        ///   ],
        ///   "testCaseId": "guid-123"
        /// }
        /// 
        /// Response (404 Not Found):
        /// {
        ///   "message": "Datapool для тест-кейса с ID guid-123 не найден"
        /// }
        /// </example>
        [HttpGet("by-testcase/{testCaseId}")]
        [ProducesResponseType(typeof(DataPool), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public async Task<IActionResult> GetDataPoolByTestCaseId(
            [FromRoute] 
            [Required(ErrorMessage = "ID тест-кейса не может быть пустым")]
            [MinLength(1, ErrorMessage = "ID тест-кейса не может быть пустым")]
            string testCaseId)
        {
            var validationResult = ValidateRequiredString(testCaseId, "testCaseId");
            if (validationResult != null) return validationResult;

            return await ExecuteAsync(async () => await _dataPoolService.GetDataPoolByTestCaseIdAsync(testCaseId),
                "GetDataPoolByTestCaseId",
                $"Успешно получен datapool для тест-кейса с ID {testCaseId}",
                $"Datapool для тест-кейса с ID {testCaseId} не найден");
        }
    }
}